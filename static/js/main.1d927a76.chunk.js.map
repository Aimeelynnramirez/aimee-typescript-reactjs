{"version":3,"sources":["Hoc.tsx","Message.tsx","RepoHoc.js","Repo.js","App.js","serviceWorker.js","index.tsx"],"names":["initialState","name","message","Message","WrappedComponent","state","this","Component","messageHoc","props","firebaseConfig","apiKey","process","projectId","firebase","initializeApp","database","firestore","defaultState","getName","getRepo","show","dataRefRepo","collection","showProducts","type","showRepoProducts","console","log","get","then","doc","empty","forEach","i","newDataName","data","push","newDataRepo","iconUrl","reducer","action","StoreContext","createContext","StoreProvider","children","useReducer","value","dispatch","Provider","onMouseOver","onMouseLeave","useStore","useContext","Repo","nameArray","key","id","parseInt","repoArray","repo","showNames","map","nameElement","showRepos","repoElement","src","alt","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d927a76.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst initialState = {\n    name:'Aimee',\n    message:'TypeScript with Hoc is wicked cool!'\n  }\n\n    \ntype State = Readonly<typeof initialState>;\n\n\nconst messageHoc = (WrappedComponent: any)=> {\n\n    class HOC extends Component<{}, State>{\n\n        readonly state: State = initialState;\n      \n        render(){\n            return(\n                <WrappedComponent name={this.state.name} message={this.state.message}/>\n            )\n        }\n    }  \n      return HOC;\n}\nexport default messageHoc;","import React from 'react';\nimport messageHoc from './Hoc';\n\n/*interface UserMessage {\n    name:string;\n    message:string;\n}\nconst Message = (prop: UserMessage): any => {\n    return(\n    <h1>{prop.name} is saying, {prop.message}</h1>\n    );\n}*/\n\nconst example = (props: any):any => <p>{props.name} is saying, {props.message}</p>\n\n\nconst Message = messageHoc(example);\n\nexport default Message;","import React, { createContext, useReducer, useContext } from 'react';\nimport './RepoHoc.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst firebaseConfig = {\n    apiKey: process.env.apiKey,\n    projectId: \"aimee-github\"\n  };\n  \nfirebase.initializeApp(firebaseConfig);\n\nconst database = firebase.firestore();\nconst defaultState = {\n  getName:[],\n  getRepo:[],\n  show:true\n}\nlet dataRefRepo = database.collection('repositories');   \nconsole.log(dataRefRepo);\n\n  let dataRef= database.collection('user');   \n  dataRef.get()\n     .then(doc => {   \n     if (doc.empty) {\n       console.log('No such document!');\n       return;\n     } \n      // console.log('Document data:', doc);\n      doc.forEach(i =>{\n       // console.log(i.data().name);\n        let newDataName = i.data();\n        defaultState.getName.push(newDataName.name)\n       })\n   }) \n\n   dataRefRepo.get()\n     .then(doc => {   \n     if (doc.empty) {\n       console.log('Not in the cloud!');\n       return;\n     } \n      //console.log('Document data:', doc);\n      doc.forEach(i =>{\n       console.log(i.data());\n        let newDataRepo= i.data();\n        defaultState.getRepo.push(newDataRepo.iconUrl)\n       })\n   }) \n   \n\n   function showProducts(state = defaultState) {\n    return {\n      type: 'DATA_GET',\n      getName:state.getName\n\n    }\n  }\n  function showRepoProducts(state = defaultState) {\n    return {\n      type: 'DATA_REPO',\n      getRepo:state.getRepo\n\n    }\n  }\n  function hideProducts() {\n    return {\n     type: 'DATA_HIDE'\n    }\n  }\nconst reducer = (state = defaultState, action = {}) =>{\n  switch(action.type){\n    case 'DATA_GET':\n      return showProducts();\n    case 'DATA_HIDE':\n       return hideProducts();\n    case 'DATA_REPO':\n       return showRepoProducts();\n      default:\n       return state;\n  }\n}\nconst StoreContext = createContext(null);\n\nexport function StoreProvider({children}){\n  const [state, dispatch]= useReducer(reducer, defaultState);\n  const value = {state, dispatch};\n  \n  return <StoreContext.Provider value={value} onMouseOver={showProducts() ? showRepoProducts() : 'ON' } onMouseLeave={hideProducts()}>\n\n    {children}</StoreContext.Provider>\n}\nexport const useStore = () => useContext(StoreContext);\n","import React from 'react';\nimport {useStore} from './RepoHoc';\nimport './Repo.css';\nexport default function Repo(){\n    \nconst {state, dispatch} = useStore();\n  \n\nconst nameArray = [];\nfor ( let key in state.getName) {\n    nameArray.push( {\n        id: parseInt(key) + 1,\n        name: state.getName[key]\n    } );\n}\n\nconst repoArray = [];\nfor ( let key in state.getRepo) {\n    repoArray.push( {\n        id: parseInt(key) + 1,\n        repo: state.getRepo[key]\n    } );\n}\n\n//console.log(repoArray);\n\nconst showNames = nameArray.map(nameElement => (\n    <div key={nameElement.id}>\n     <p> {nameElement.id}) {nameElement.name}</p>\n       </div>)        \n    ) \n    const showRepos = repoArray.map(repoElement => {\n      return<img src= {repoElement.repo} key={repoElement.id} alt=\"fruits\" />\n    });\n return(\n  \n<section className=\"repo\">\n    <p>Example Firestore Cloud DB \n       <br/> on show on site without auth:</p>\n       <div className= \"centerButton\">\n       <div value={state.getRepo}>\n       <div className= \"images\">\n        {showRepos}\n        </div>\n        <button onClick={() => dispatch({type:'DATA_GET'})}>Show Names</button>\n        <button onClick={() => dispatch({type:'DATA_REPO'})}>Show Images</button>\n        <button onClick ={() => dispatch({type:'DATA_HIDE'})}>Hide</button>\n        </div>\n        <div value={state.getName}>\n        {showNames}\n          </div>\n          </div>\n    </section>\n      );\n   }","import React, { Component } from 'react';\nimport './App.css';\nimport Message from './Message';\nimport Repo from './Repo';\nimport {StoreProvider} from './RepoHoc';\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">  \n\n        <StoreProvider> <Repo/></StoreProvider>\n        <Message/>     \n      </header>\n    </div>\n   );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}